#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

void check_input(double &param);
void check_input(int &param);

class Wheel{
    int wheel_condition;
    double wheel_mileage;
public:
    int get_wheel_condition(){return wheel_condition;}
    int get_wheel_mileage(){return wheel_mileage;}
    Wheel(){cout<<"Колесо добавлено"<<endl;};
    void inp_Wheel(int i);
    void stat_of_wheel();
};
void Wheel::inp_Wheel(int i){  //нет возможности использовать конструктор т.к. в Vehicle нету этого конструктора для обращения
        cout<<"\nВведите изношенность колеса № "<<i+1<<"\n1-Целое\n0-Изношенное"<<endl;
        cin>>wheel_condition;
        cout<<"Введите пробег колеса"<<endl;
        cin>>wheel_mileage;
}
void Wheel::stat_of_wheel(){
    if(wheel_condition){
        int arr_of_stat[(int)wheel_mileage];
        int count_0=0;
        for(int i=0;i<(int)wheel_mileage;i++){
            int start = 0;
            int end = 1;
            arr_of_stat[i] = rand() % (end - start + 1) + start;
            if(arr_of_stat[i]==0)
            count_0++;
        }
        if(count_0>10){
            wheel_condition=0;
        }
    }
}

class Engine{
    double engine_consumption;
protected:
    double engine_power;
public:
    double get_engine_consumption(){return engine_consumption;}
    double calculate_engine_consumption();
};

double Engine::calculate_engine_consumption(){
      engine_consumption=pow(engine_power,1/3)+fabs(sqrt(engine_power)-6.25);
      return engine_consumption;
}

class Fuel_system{

    double remaining_fuel;
protected:
    int count_gas_stations;
    double tank_volume;
public:
    Fuel_system(){};
    double get_tank_volume(){return tank_volume;}
    double get_remaining_fuel(){return remaining_fuel;}
    void set_remaining_fuel(double calc_remaining_fuel){remaining_fuel=calc_remaining_fuel;}
};


class Vehicle: public Engine,public Fuel_system{
    int count_wheel;
    double mileage;
    double speed;
    double travel_time;
    string name;
    int main_flag=0;
public:
    Wheel* ptr_wheel;
    Vehicle();
    Vehicle(int i,Vehicle* number_Vehicle);
    ~Vehicle();
    double get_mileage(){return mileage;}
    void calculate_speed();
    double get_speed(){return speed;}
    int get_count_wheel();
    void output();
    friend double calculate_remaining_fuel(Vehicle* number_Vehicle,int i);
    int calculate_count_gas_stations(double length_route);
    friend double calculate_travel_time(Vehicle* number_Vehicle,double length_route,int i);
    int get_main_flag();
    string get_name();
};
void Vehicle::output(){
    cout<<"Информация о ТС "<<name<<endl;
    cout<< "Количество колес: "<<count_wheel<<endl;
    for(int i=0;i<count_wheel;i++){
        cout<< "Состояние колеса "<< i+1 <<": "<<endl;
        cout<<ptr_wheel[i].get_wheel_condition()<<endl;
        cout<< "Пробег колеса "<< i+1 <<": "<<endl;
        cout<<ptr_wheel[i].get_wheel_mileage()<<endl;
        cout <<endl;
    }
    cout<< "Мощность двигателя(ЛС): "<<engine_power<<endl;
    calculate_speed();
    cout<< "Скорость(км/ч): "<<speed<<endl;
    calculate_engine_consumption();
    cout<< "Потребление топлива(л/100км): "<<get_engine_consumption()<<endl;
    main_flag=1;
}

double calculate_travel_time(Vehicle* number_Vehicle,double length_route,int i){
    number_Vehicle[i].calculate_speed();
    number_Vehicle[i].get_speed();
    number_Vehicle[i].travel_time=length_route/number_Vehicle[i].speed;
    return number_Vehicle[i].travel_time;
 }

int Vehicle::calculate_count_gas_stations(double length_route){
    calculate_engine_consumption();
//    cout<<"!Начало проверки значений!"<<endl;
//    cout<<"Объем бака: "<<tank_volume<<endl;
    count_gas_stations=length_route*(get_engine_consumption()/100)/tank_volume;
//    cout<<"!Количество заправок!"<<endl;
//    cout<<count_gas_stations<<endl;
    if(count_gas_stations>1)
        count_gas_stations=ceil(count_gas_stations);
    else
        count_gas_stations=floor(count_gas_stations);
    return count_gas_stations;
}

int Vehicle::get_main_flag(){
    return main_flag;
}
string Vehicle::get_name(){
    return name;
}

double calculate_remaining_fuel(Vehicle* number_Vehicle,int i){
    double remaining_fuel=number_Vehicle[i].get_remaining_fuel();
    remaining_fuel=number_Vehicle[i].get_tank_volume()-number_Vehicle[i].mileage*number_Vehicle[i].get_engine_consumption();
    number_Vehicle[i].set_remaining_fuel(remaining_fuel);
    return remaining_fuel;
}

int Vehicle::get_count_wheel(){
    return count_wheel;
}
void Vehicle::calculate_speed(){
    if(main_flag!=1){
        count_wheel=1;
    }
    speed=sqrt(engine_power)*fabs(70/(double)count_wheel-2.5);
    int count1=0; //подсчет количества изношенных колес
    for(int i=0;i<count_wheel;i++){    //!В случае ошибки в скорости проверить это место!
        if(ptr_wheel[i].get_wheel_condition()==0){
            count1++;
        }
    }
    if(count1>0)
        speed=speed/double(2*count1);
}
Vehicle::Vehicle(){
    cout <<"Запись об ТС "<< name <<" создана!"<<endl;
    };
//Fuel_system::Fuel_system(string name,Vehicle* number_Vehicle,int i){
//        cout<<"Бак ТС" << name <<"добавлен!"<<endl;
//        cout<<"Введите объем бака"<<endl;
//        cin>>number_Vehicle[i].tank_volume;
//    }
Vehicle::Vehicle(int i,Vehicle* number_Vehicle){
    cout<< "Введите название ТС:"<<endl;
    cin>>number_Vehicle[i].name;
    cout<< "Введите пробег ТС:"<<endl;
    check_input(number_Vehicle[i].mileage); //проверка на числовое значение ранспортных средств
    cout<< "Введите мощность двигателя ТС (ЛС) "<<name<<endl;
    check_input(number_Vehicle[i].engine_power);
    cout<< "Введите объем бака ТС (л) "<<name<<endl;
    check_input(number_Vehicle[i].tank_volume);
    cout<< "Введите количество колес ТС "<<name<<endl;
    check_input(number_Vehicle[i].count_wheel); //проверка на числовое значение количества колес
    number_Vehicle[i].main_flag=1;
    number_Vehicle[i].ptr_wheel=new Wheel[number_Vehicle[i].count_wheel]; //САМАЯ ВАЖНАЯ ТОЧКА ПРОГРАММЫ
}
Vehicle::~Vehicle(){
        cout <<"Запись об ТС "<< name <<" удадена!"<<endl;
    };


void clean();
void ignoreLine();
void comparison(double* travel_time_arr,double* count_gas_stations, string* arr_name,int size_arr);

int main()
{
    setlocale(LC_CTYPE,"");

    int num=0;
    double length_route=.0;
    int i=0;
    int flag_track=0;
    int flag_time_track=0;
    int size_arr=0;


    int check=0;
    do{
        cout << "Введите количество транспортных средств!" << endl;
        cin >> size_arr;

        while (cin.fail()) {
            ignoreLine();
            cout << "Пожалуйста введите число а не символ!" << endl;
            cin >> size_arr;
        }
        if(size_arr > 0){
            check=1;
        }
        else{
            cout<<"Ошибка ввода!"<<endl;
            }
    }while(check!=1);
    clean();

    double* travel_time_arr =new double[size_arr];
    double* count_gas_stations =new double[size_arr];
    string* arr_name=new string[size_arr];
    Vehicle* number_Vehicle=new Vehicle[size_arr]; // создается класс транспортных средств с n количеством объектов и выводится натпись о том что создалось

    do{
        cout<<"1-Ввод данных о новом ТС"<<endl;
        cout<<"2-Вывод данных ТС"<<endl;
        cout<<"3-Ввод протяженности трассы"<<endl;
        cout<<"4-Расчет прохождения трассы"<<endl;
        if(flag_time_track==1){
            cout<<"5-Результаты прохождения трассы"<<endl;
        }
        cout<<"0-Закончить работу"<<endl;
        cout << "Введите действие: ";

        cin >> num;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число а не символ!" << endl;
                cin >> num;
            }

        clean();
        if(num==1){
            cout << "Введите номер транспорта!" << endl;
            cin >> i;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число а не символ!" << endl;
                cin >> i;
            }

            if(i<=size_arr&&i>0){
                i--;
                Vehicle(i,number_Vehicle);
                for(int j=0;j<number_Vehicle[i].get_count_wheel();j++){
                    number_Vehicle[i].ptr_wheel[j].inp_Wheel(j);
                }
                //!ввод закончен начинается проверка статусов колес
                for(int j=0;j<number_Vehicle[i].get_count_wheel();j++){
                    number_Vehicle[i].ptr_wheel[j].stat_of_wheel();
                }

                clean();
            }else{
                cout<<"Такого ТС не существует!"<<endl;
                cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;
                cin.get();
                cin.get();
            }
            clean();

        }
        else if(num==2){
            cout << "Введите номер транспорта!" << endl;
            cin >> i;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> i;
            }
            if(i<=size_arr&&i>0){
                clean();
                i--;
                number_Vehicle[i].output();
            }else{
                cout<<"Такого ТС не существует!"<<endl;
            }

            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;
            cin.get();
            cin.get();
            clean();
        }else if(num==3){
            clean();
            cout<<"Введите протяженность трассы (км)!"<<endl;
            cin>>length_route;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> length_route;
            }
            if(length_route>0){
                flag_track=1;
                cout<<"Данные успешно введены!"<<endl;
            }else{
                cout<<"Длина дороги не может быть отрицательной!"<<endl;
            }
            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;

            cin.get();
            cin.get();
            clean();

        }else if(num==4){
            int check=0;
            for(int i=0;i<size_arr;i++){
                check=check+number_Vehicle[i].get_main_flag();
            }
            if(check==size_arr){
                if(flag_track==1){
                    for(int i=0;i<size_arr;i++){
                        travel_time_arr[i]=calculate_travel_time(number_Vehicle,length_route,i);
                        count_gas_stations[i]=number_Vehicle[i].calculate_count_gas_stations(length_route);
                        arr_name[i]=number_Vehicle[i].get_name();
                    }

                    cout<<"Расчет прохождения трассы проведен!"<<endl;
                    flag_time_track=1;
                }else{
                    cout<<"Для использования функции введите длину трассы!"<<endl;
                }
            }else{
                cout<<"Введены данные не о всех ТС!"<<endl;
            }
            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;
                    cin.get();
                    cin.get();
                    clean();
        }else if(num==5){
            comparison(travel_time_arr,count_gas_stations,arr_name,size_arr);
           for(int i=0;i<size_arr;i++){
                cout<<"Время прохождения трассы автомобилем "<< arr_name[i] << endl;
                cout<< "Часов:" <<(int)(travel_time_arr[i])<<"\t";
                cout<< "Минут:" <<(int)((travel_time_arr[i]-(int)travel_time_arr[i])*60)<<"\t";
                cout<< "Секунд:" <<(int)(travel_time_arr[i]*3600-(int)(travel_time_arr[i])*3600-(int)((travel_time_arr[i]-(int)travel_time_arr[i])*60)*60)<<endl;
                cout<<"Количество запарвок: "<<count_gas_stations[i]<<endl;
           }
            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;
            cin.get();
            cin.get();
            clean();
        }
        if(num==0){
            cout<<"Точно хотите завершить работу?"<<endl;
            cout<<"1-ДА"<<endl;
            cout<<"0-НЕТ"<<endl;
            cin>>num;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> num;
            }
            num--;
            clean();
        }
    }while(num!=0);
    cout << "Работа завершена!"<<endl;

    delete[] number_Vehicle;
}

void ignoreLine()
{
    cin.clear();
    cin.ignore();
}
void clean(){
    int i=0;
    while(i<100){
        cout<<endl;
        i++;
    }
}
void check_input(double &param){
    int flag=0;
    do{
        cin>>param;
        if(param>0){
            flag=1;
        }else{
            cout<<"Повторите ввод,данные невозможны!!!"<<endl;
        }
    }while(flag!=1);
    flag=0;
}
void check_input(int &param){
    int flag=0;
    do{
        cin>>param;
        if(param>1){
            flag=1;
        }else{
            cout<<"Повторите ввод,данные невозможны!!!"<<endl;
        }
    }while(flag!=1);
    flag=0;
}
void in_comp(double* travel_time_arr,double* count_gas_stations, string* arr_name,int i,int j){
    double temp=travel_time_arr[j];
    travel_time_arr[j]=travel_time_arr[j+1];
    travel_time_arr[j+1]=temp;
    int temp_refuelings=count_gas_stations[j];
    count_gas_stations[j]=count_gas_stations[j+1];
    count_gas_stations[j+1]=temp_refuelings;
    string temp_name;
    temp_name=arr_name[j];
    arr_name[j]=arr_name[j+1];
    arr_name[j+1]=temp_name;
};
void comparison(double* travel_time_arr,double* count_gas_stations, string* arr_name,int size_arr){

            for(int i=0;i<size_arr;i++)
            {
              for(int j=0;j<size_arr-1;++j)
              {
                  if(travel_time_arr[j]>travel_time_arr[j+1])
                {
                    in_comp(travel_time_arr,count_gas_stations,arr_name,i,j);
                }
                if(travel_time_arr[j]==travel_time_arr[j+1])
                {
                  if(count_gas_stations[j]>count_gas_stations[j+1])
                  {
                    in_comp(travel_time_arr,count_gas_stations,arr_name,i,j);
                  }
                }
              }
            }
}


#include <iostream>
#include <vector>
#include <cmath>

using namespace std;


void clean();
void ignoreLine();
void check_input(double &param);
void check_input(int &param);


class Wheel{
    int wheel_condition;
    double wheel_mileage;
public:
    int get_wheel_condition(){return wheel_condition;}
    double get_wheel_mileage(){return wheel_mileage;}
    void set_wheel_mileage(double length_route){wheel_mileage+=length_route;}
    Wheel(){cout<<"Колесо добавлено"<<endl;};
    void inp_Wheel(int i);
    void stat_of_wheel();
};


class Fuel_system{
    double remaining_fuel;
protected:
    int count_gas_stations;
    double tank_volume;
public:
    double get_tank_volume(){return tank_volume;}
    double get_remaining_fuel(){return remaining_fuel;}
    double get_count_gas_stations(){return count_gas_stations;}
};

class Engine{
    double engine_consumption;
protected:
    double engine_power;
public:
    double calculate_engine_consumption();
    double get_engine_power(){return engine_power;}
    double get_engine_consumption(){return engine_consumption;}
};

class Vehicle:public Fuel_system,public Engine{
    int count_wheel;
    double mileage;
    double speed;
    double travel_time;
    string name;
    int main_flag=0;
public:
    Wheel* ptr_wheel;
    Vehicle();
    void calculate_speed();
    friend double calculate_remaining_fuel(Vehicle* number_Vehicle,int i);
    int calculate_count_gas_stations(double length_route);
    friend double calculate_travel_time(Vehicle* number_Vehicle,double length_route,int i);
    int get_main_flag(){return main_flag;};
    int get_count_wheel(){return count_wheel;};
    double get_speed(){return speed;}
    double get_mileage(){return mileage;}
    string get_name(){return name;};
    void set_name(string inp_name){name=inp_name;};
    void set_mileage(double inp_mileage){mileage=inp_mileage;};
    void set_count_wheel(double inp_count_wheel){count_wheel=inp_count_wheel;};
    void set_tank_volume(double inp_tank_volume){tank_volume=inp_tank_volume;};
    void set_engine_power(double inp_engine_power){engine_power=inp_engine_power;};
    void set_main_flag(int inp_main_flag){main_flag=inp_main_flag;};
};

ostream &operator << (ostream &srteam,Vehicle Obj){
    if(Obj.get_main_flag()==1){
        srteam<<"Информация о ТС "<<Obj.get_name()<<endl;
        srteam<< "Количество колес: "<<Obj.get_count_wheel()<<endl;
        for(int i=0;i<Obj.get_count_wheel();i++){
            srteam<< "Состояние колеса "<< i+1 <<": "<<endl;
            srteam<<Obj.ptr_wheel[i].get_wheel_condition()<<endl;
            srteam<< "Пробег колеса "<< i+1 <<": "<<endl;
            srteam<<Obj.ptr_wheel[i].get_wheel_mileage()<<endl;
            srteam <<endl;
        }
        srteam<< "Мощность двигателя(ЛС): "<<Obj.get_engine_power()<<endl;
        Obj.calculate_speed();
        srteam<< "Скорость(км/ч): "<<Obj.get_speed()<<endl;
        Obj.calculate_engine_consumption();
        srteam<< "Потребление топлива(л/100км): "<<Obj.get_engine_consumption()<<endl;
    }
    else
        cout<<"!ДЛЯ ВЫВОДА ДАННЫХ, СНАЧАЛА ВВЕДИТЕ ДАННЫЕ!"<<endl;
}

istream &operator >> (istream &srteam,Vehicle& Obj){
    string name;
    double mileage,engine_power,tank_volume;
    int count_wheel;
    cout<< "Введите название ТС:"<<endl;
    srteam>>name;
    Obj.set_name(name);
    cout<< "Введите пробег ТС:"<<endl;
    srteam>>mileage;
    Obj.set_mileage(mileage);
    cout<< "Введите мощность двигателя ТС (ЛС) "<<name<<endl;
    srteam>>engine_power;
    Obj.set_engine_power(engine_power);
    cout<< "Введите объем бака ТС (л) "<<name<<endl;
    srteam>>tank_volume;
    Obj.set_tank_volume(tank_volume);
    cout<< "Введите количество колес ТС "<<name<<endl;
    srteam>>count_wheel;
    Obj.set_count_wheel(count_wheel);
    Obj.set_main_flag(1);
    Obj.ptr_wheel=new Wheel[Obj.get_count_wheel()];
}

Vehicle::Vehicle(){
    main_flag=1;
    cout<< "Введите название ТС:"<<endl;
    cin>>name;
    cout<< "Введите пробег ТС:"<<endl;
    check_input(mileage); //проверка на числовое значение ранспортных средств
    cout<< "Введите мощность двигателя ТС (ЛС) "<<name<<endl;
    check_input(engine_power);
    cout<< "Введите объем бака ТС (л) "<<name<<endl;
    check_input(tank_volume);
    cout<< "Введите количество колес ТС "<<name<<endl;
    check_input(count_wheel); //проверка на числовое значение количества колес
    main_flag=1;
    ptr_wheel=new Wheel[count_wheel]; //САМАЯ ВАЖНАЯ ТОЧКА ПРОГРАММЫ
}

double Engine::calculate_engine_consumption(){
      engine_consumption=pow(engine_power,1/3)+fabs(sqrt(engine_power)-6.25);
      return engine_consumption;
}

void Vehicle::calculate_speed(){
    if(main_flag!=1){
        count_wheel=1;
    }
    speed=sqrt(engine_power)*fabs(70/(double)count_wheel-2.5);
    int count1=0; //подсчет количества изношенных колес
    for(int i=0;i<count_wheel;i++){    //!В случае ошибки в скорости проверить это место!
        if(ptr_wheel[i].get_wheel_condition()==0){
            count1++;
        }
    }
    if(count1>0)
        speed=speed/double(2*count1);
}


int main()
{
    setlocale(LC_CTYPE,"");

    int num=0;
    double length_route=.0;
    int i=0;
    int flag_track=0;
    int flag_time_track=0;
    int check=0;


//    double* travel_time_arr =new double[size_arr];
//    double* count_gas_stations =new double[size_arr];
//    string* arr_name=new string[size_arr];

    vector <Vehicle> vctVehicle;


    do{
        cout<<"1-Ввод данных о новом ТС"<<endl;
        cout<<"2-Вывод данных ТС"<<endl;
        cout<<"3-Ввод протяженности трассы"<<endl;
        cout<<"4-Расчет прохождения трассы"<<endl;
        if(flag_time_track==1){
            cout<<"5-Результаты прохождения трассы"<<endl;
        }
        cout<<"0-Закончить работу"<<endl;
        cout << "Введите действие: ";

        cin >> num;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число а не символ!" << endl;
                cin >> num;
            }

        clean();
        if(num==1){
            cout << "Введите номер транспорта!" << endl;
            cin >> i;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число а не символ!" << endl;
                cin >> i;
            }
            if(i<=vctVehicle.size()&&i>0){
                i--;
                cin>>vctVehicle.at(i);

            }else{
                vctVehicle.push_back(Vehicle());
//                for(int j=0;j<vctVehicle[i].get_count_wheel();j++){
//                    vctVehicle[i].ptr_wheel[j].inp_Wheel(j);
//                }
//                clean();
            }
            clean();

        }
        else if(num==2){
            cout << "Введите номер транспорта!" << endl;
            cin >> i;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> i;
            }

                clean();
                i--;
                cout<<vctVehicle[i];

            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;
            cin.get();
            cin.get();
            clean();
        }else if(num==3){
            clean();
            cout<<"Введите протяженность круга (км)!"<<endl;
            cin>>length_route;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> length_route;
            }
            if(length_route>0){
                flag_track=1;
                cout<<"Данные успешно введены!"<<endl;
            }else{
                cout<<"Длина дороги не может быть отрицательной!"<<endl;
            }
            cout<<"Для возврашения в главное меню нажмите любую клавишу!"<<endl;

            cin.get();
            cin.get();
            clean();

        }else if(num==4){

        }else if(num==5){

        }
        if(num==0){
            cout<<"Точно хотите завершить работу?"<<endl;
            cout<<"1-ДА"<<endl;
            cout<<"0-НЕТ"<<endl;
            cin>>num;
            while (cin.fail()) {
                ignoreLine();
                cout << "Пожалуйста введите число, а не символ!" << endl;
                cin >> num;
            }
            num--;
            clean();
        }
    }while(num!=0);
    cout << "Работа завершена!"<<endl;

    return 0;
}


void ignoreLine()
{
    cin.clear();
    cin.ignore();
}
void clean(){
    int i=0;
    while(i<100){
        cout<<endl;
        i++;
    }
}
void check_input(double &param){
    int flag=0;
    do{
        cin>>param;
        if(param>=0){
            flag=1;
        }else{
            cout<<"Повторите ввод,данные невозможны!!!"<<endl;
        }
    }while(flag!=1);
    flag=0;
}
void check_input(int &param){
    int flag=0;
    do{
        cin>>param;
        if(param>1){
            flag=1;
        }else{
            cout<<"Повторите ввод,данные невозможны!!!"<<endl;
        }
    }while(flag!=1);
    flag=0;
}
